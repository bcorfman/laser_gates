# This workflow will install Python dependencies and build executables with Nuitka
# It builds on Linux and Windows, stores each build as an artifact, creates a Release,
# then uploads each artifact to that Release with a per-asset label.
name: Build Application

on:
  push:
    tags:
      - "v[0-9]+.*"

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ github.token }}
  APP_NAME: "lasergates"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux
            x86_64: ./lasergates.bin
            asset_name: lasergates
            python-version: "3.11"
          - os: windows-latest
            platform: windows
            x86_64: ./lasergates.exe
            asset_name: lasergates.exe
            python-version: "3.11"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: seanmiddleditch/gha-setup-vsdevenv@master
        if: matrix.os == 'windows-latest'

      - uses: Chocobo1/setup-ccache-action@v1

      - name: Set env repo name
        run: echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        shell: bash

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv python pin ${{ matrix.python-version }}
          uv sync --no-dev --frozen
          uv pip install nuitka ordered-set
        shell: bash

      - name: Build Executable with Nuitka (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: game.py
          mode: app
          output-file: lasergates
          static-libpython: "yes"
          nofollow-import-to: "*tk*,multiprocessing,gi"
          disable-plugins: tk-inter,dill-compat,eventlet,gevent,pyqt5,pyqt6,pyside2,pyside6,delvewheel,pywebview,matplotlib,spacy,enum-compat,pbr-compat,gevent,pmw-freezer,transformers,upx,kivy,options-nanny,multiprocessing,gi
          enable-plugins: arcade-actions
          include-data-dir: res=res

      - name: Build Executable with Nuitka (Windows)
        if: matrix.os == 'windows-latest'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: game.py
          mode: app
          output-file: lasergates
          nofollow-import-to: "*tk*,multiprocessing,gi"
          enable-plugins: arcade-actions
          disable-plugins: tk-inter,dill-compat,eventlet,gevent,pyqt5,pyqt6,pyside2,pyside6,delvewheel,pywebview,matplotlib,spacy,enum-compat,pbr-compat,gevent,pmw-freezer,transformers,upx,kivy,options-nanny,multiprocessing,gi
          include-data-dir: res=res
          windows-console-mode: enable

      - name: Locate built executable (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          set -euo pipefail
          echo "Searching for built Linux binary..."
          # List to help debugging when paths change
          ls -laR . | head -n 500 || true
          BIN=$(find . -maxdepth 4 -type f -name 'lasergates*' -perm -u+x | head -n1 || true)
          if [ -z "${BIN}" ]; then
            echo "ERROR: No Linux binary found after build"
            exit 1
          fi
          echo "Found: ${BIN}"
          mv "${BIN}" ./lasergates.bin
        shell: bash

      - name: Locate built executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "Searching for built Windows binary..."
          Get-ChildItem -Recurse -File -Filter 'lasergates*.exe' | Select-Object -First 1 | ForEach-Object {
            Write-Host ("Found: " + $_.FullName)
            Move-Item $_.FullName -Destination ./lasergates.exe -Force
          }
          if (!(Test-Path ./lasergates.exe)) {
            Write-Error "ERROR: No Windows binary found after build"
            exit 1
          }
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.x86_64 }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: windows

      - name: Rename artifacts
        run: |
          mv linux/lasergates.bin lasergates
          mv windows/lasergates.exe lasergates.exe

      - name: Create release (if missing) and upload artifacts to tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          echo "Target release tag: $TAG"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists; will upload assets with --clobber"
          else
            gh release create "$TAG" \
              --title "$TAG" \
              --notes "Automated build for $TAG"
          fi
          gh release upload "$TAG" lasergates --clobber #"Linux (Ubuntu) build"
          gh release upload "$TAG" lasergates.exe --clobber #"Windows build"