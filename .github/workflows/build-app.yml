# This workflow will install Python dependencies and build executables with Nuitka
# It builds on Linux and Windows, stores each build as an artifact, creates a Release,
# then uploads each artifact to that Release with a per-asset label.
name: Build Application

on:
  push:
    tags:
      - "v[0-9]+.*"

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ github.token }}
  APP_NAME: "lasergates"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux
            x86_64: ./game.bin
            asset_name: lasergates
            python-version: "3.13"
          - os: windows-latest
            platform: windows
            x86_64: ./game.exe
            asset_name: lasergates.exe
            python-version: "3.13"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: seanmiddleditch/gha-setup-vsdevenv@master
        if: matrix.os == 'windows-latest'

      - uses: Chocobo1/setup-ccache-action@v1

      - name: Set env repo name
        run: echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        shell: bash

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash
        if: matrix.os == 'ubuntu-latest'

      - name: Install uv (Windows)
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
          echo "$env:USERPROFILE\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
        if: matrix.os == 'windows-latest'

      - name: Install dependencies
        run: |
          uv python pin ${{ matrix.python-version }}
          uv sync --no-dev --frozen
          uv pip install nuitka ordered-set
        shell: bash

      - name: Deploy with Nuitka (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        env:
          UV_LINK_MODE: copy
        run: |
          uv run python3 -m nuitka \
            --static-libpython=yes \
            --follow-imports \
            --include-data-dir=res=res \
            --onefile \
            --assume-yes-for-downloads \
            game.py
        shell: bash

      - name: Deploy with Nuitka (Windows)
        if: matrix.os == 'windows-latest'
        env:
          UV_LINK_MODE: copy
        run: |
          uv run python -m nuitka `
            --follow-imports `
            --include-data-dir=res=res `
            --onefile `
            --assume-yes-for-downloads `
            --windows-console-mode=disable `
            game.py
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.x86_64 }}

  create_release:
    # Create the Release once (so we can upload assets to it with labels)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: "Automated release for ${{ github.ref_name }} (built by GitHub Actions)"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    # Download artifacts created by the matrix builds and upload them to the Release with labels
    runs-on: ubuntu-latest
    needs: [build, create_release]
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: windows

      - name: Upload artifacts to Release with labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RELEASE_ID: ${{ needs.create_release.outputs.release_id }}
        run: |
          set -e

          # helper to url-encode labels
          urlenc() {
            python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))" "$1"
          }

          # map platforms -> desired asset name and label
          declare -A ASSET_NAME_MAP
          declare -A LABEL_MAP
          ASSET_NAME_MAP[linux]="lasergates"
          LABEL_MAP[linux]="Linux (Ubuntu) build"
          ASSET_NAME_MAP[windows]="lasergates.exe"
          LABEL_MAP[windows]="Windows build"

          # For each downloaded artifact directory, find the file and upload
          for platform in linux windows; do
            DIR="./${platform}"
            if [ ! -d "$DIR" ]; then
              echo "Warning: artifact directory $DIR missing, skipping"
              continue
            fi

            FILE=$(find "$DIR" -type f -print -quit)
            if [ -z "$FILE" ]; then
              echo "No file found in $DIR, skipping"
              continue
            fi

            # Decide the final asset name shown in the Release and label
            if [ "$platform" = "linux" ]; then
              ASSET_NAME="lasergates"
              LABEL="Linux (Ubuntu) build"
            else
              ASSET_NAME="lasergates.exe"
              LABEL="Windows build"
            fi

            LABEL_ENC=$(urlenc "$LABEL")
            UPLOAD_URL="https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=${ASSET_NAME}&label=${LABEL_ENC}"

            echo "Uploading $FILE as ${ASSET_NAME} with label '${LABEL}'..."
            curl -sS -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$FILE" \
              "${UPLOAD_URL}"

            echo "Uploaded $ASSET_NAME"
          done